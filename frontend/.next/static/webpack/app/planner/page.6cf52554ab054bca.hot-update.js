"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/planner/page",{

/***/ "(app-pages-browser)/./hooks/Planner/plannerReducer.tsx":
/*!******************************************!*\
  !*** ./hooks/Planner/plannerReducer.tsx ***!
  \******************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   plannerReducer: function() { return /* binding */ plannerReducer; }\n/* harmony export */ });\n/* harmony import */ var immer__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! immer */ \"(app-pages-browser)/./node_modules/immer/dist/immer.mjs\");\n\nconst plannerReducer = (0,immer__WEBPACK_IMPORTED_MODULE_0__.produce)((draft, action)=>{\n    switch(action.type){\n        // DONE\n        case \"dataFetchedFromDatabase\":\n            {\n                return action.payload;\n            }\n        case \"newBoardAdded\":\n            {\n                const { boardId, boardName } = action.payload;\n                draft.boardOrder.push(boardId);\n                draft.boards[boardId] = {\n                    id: boardId,\n                    name: boardName,\n                    columns: []\n                };\n                break;\n            }\n        // DONE\n        case \"newColumnAdded\":\n            {\n                const { boardId, newColumnId, newColumnName } = action.payload;\n                draft.boards[boardId].columns.push(newColumnId);\n                draft.columns[newColumnId] = {\n                    id: newColumnId,\n                    name: newColumnName,\n                    taskCards: []\n                };\n                break;\n            }\n        // DONE\n        case \"columnsReordered\":\n            {\n                const { boardId, newColumnOrder } = action.payload;\n                draft.boards[boardId].columns = newColumnOrder;\n                break;\n            }\n        // DONE\n        case \"cardMovedWithinColumn\":\n            {\n                const { columnId, reorderedCardIds } = action.payload;\n                draft.columns[columnId].taskCards = reorderedCardIds;\n                break;\n            }\n        case \"cardMovedAcrossColumns\":\n            {\n                const { draggableId, source, destination } = action.payload;\n                const startingColumn = draft.columns[source.droppableId];\n                const endingColumn = draft.columns[destination.droppableId];\n                const startCardIds = Array.from(startingColumn.taskCards) // Copy of taskCards\n                ;\n                startCardIds.splice(source.index, 1);\n                const newStartColumn = {\n                    ...startingColumn,\n                    taskCards: startCardIds\n                };\n                const endCardIds = Array.from(endingColumn.taskCards);\n                endCardIds.splice(destination.index, 0, draggableId);\n                const newEndColumn = {\n                    ...endingColumn,\n                    taskCards: endCardIds\n                };\n                draft.columns[newStartColumn.id] = newStartColumn;\n                draft.columns[newEndColumn.id] = newEndColumn;\n                break;\n            }\n        case \"idOfCardBeingDraggedChanged\":\n            {\n                draft.idOfCardBeingDragged = action.payload;\n                break;\n            }\n        case \"taskCardInitializationCancelled\":\n            {\n                draft.taskCardBeingInitialized = null;\n                break;\n            }\n        case \"newTaskCardInitialized\":\n            {\n                draft.taskCardBeingInitialized = action.payload;\n                break;\n            }\n        case \"taskCardBeingInitializedHighlightStatusChange\":\n            {\n                draft.taskCardBeingInitialized.isHighlighted = action.payload;\n                break;\n            }\n        case \"dataEnteredInTaskCardBeingInitializedStatusChanged\":\n            {\n                draft.dataEnteredInTaskCardBeingInitialized = action.payload;\n                break;\n            }\n        case \"newTaskCardAdded\":\n            {\n                const { columnId, taskCardId, title, content, category } = action.payload;\n                const newTaskCard = {\n                    id: taskCardId,\n                    title: title,\n                    category: category,\n                    content: content,\n                    checked: false,\n                    subTasks: []\n                };\n                draft.taskCards[taskCardId] = newTaskCard;\n                draft.columns[columnId].taskCards.unshift(taskCardId);\n                draft.dataEnteredInTaskCardBeingInitialized = false;\n                draft.taskCardBeingInitialized = null;\n                break;\n            }\n        case \"taskCardCheckedStatusChanged\":\n            {\n                const { taskCardId, isChecked } = action.payload;\n                draft.taskCards[taskCardId].checked = isChecked;\n                break;\n            }\n        case \"taskCardTitleChanged\":\n            {\n                const { taskCardId, newTitle } = action.payload;\n                draft.taskCards[taskCardId].title = newTitle;\n                break;\n            }\n        case \"taskCardContentChanged\":\n            {\n                const { taskCardId, newContent } = action.payload;\n                draft.taskCards[taskCardId].content = newContent;\n                break;\n            }\n        case \"taskCardMovedToBottom\":\n            {\n                const { columnId, taskCardIndex } = action.payload;\n                draft.columns[columnId].taskCards.push(draft.columns[columnId].taskCards.splice(taskCardIndex, 1)[0]);\n                break;\n            }\n        case \"taskCardMovedToTop\":\n            {\n                const { columnId, taskCardIndex } = action.payload;\n                draft.columns[columnId].taskCards.unshift(draft.columns[columnId].taskCards.splice(taskCardIndex, 1)[0]);\n                break;\n            }\n        case \"taskCardDeleted\":\n            {\n                const { columnId, taskCardId } = action.payload;\n                draft.columns[columnId].taskCards = draft.columns[columnId].taskCards.filter((cardId)=>cardId !== taskCardId);\n                delete draft.taskCards[taskCardId];\n                break;\n            }\n        case \"subTaskDragStatusChanged\":\n            {\n                draft.isSubTaskBeingDragged = action.payload;\n                break;\n            }\n        case \"subTasksReordered\":\n            {\n                const { draggableId, sourceIndex, destIndex } = action.payload;\n                const [taskCardId, subTaskId] = draggableId.split(\"~\");\n                const reorderedSubTasks = Array.from(draft.taskCards[taskCardId].subTasks);\n                reorderedSubTasks.splice(sourceIndex, 1);\n                reorderedSubTasks.splice(destIndex, 0, subTaskId);\n                draft.taskCards[taskCardId].subTasks = reorderedSubTasks;\n                break;\n            }\n        case \"subTasksCheckedStatusChanged\":\n            {\n                const { subTaskId, isChecked } = action.payload;\n                draft.subTasks[subTaskId].checked = isChecked;\n                break;\n            }\n        case \"subTaskTitleChanged\":\n            {\n                const { subTaskId, newTitle } = action.payload;\n                draft.subTasks[subTaskId].title = newTitle;\n                break;\n            }\n        case \"newSubTaskAddedOnEnterKeydown\":\n            {\n                const { newSubTaskId, taskCardId, subTaskId } = action.payload;\n                const subTaskIds = draft.taskCards[taskCardId].subTasks;\n                let subTaskIndex = subTaskIds.findIndex((id)=>id === subTaskId);\n                draft.taskCards[taskCardId].subTasks.splice(subTaskIndex + 1, 0, newSubTaskId);\n                draft.subTasks[newSubTaskId] = {\n                    id: newSubTaskId,\n                    title: \"\",\n                    checked: false\n                };\n                break;\n            }\n        case \"newSubTaskAddedOnButtonClick\":\n            {\n                const { taskCardId, newSubTaskId } = action.payload;\n                draft.taskCards[taskCardId].subTasks.push(newSubTaskId);\n                draft.subTasks[newSubTaskId] = {\n                    id: newSubTaskId,\n                    title: \"\",\n                    checked: false\n                };\n                break;\n            }\n        case \"subTaskDeletedOnBackspaceKeydown\":\n            {\n                const { taskCardId, subTaskId } = action.payload;\n                /* Moves cursor focus to subtask above using the subtask ID */ const subTaskIds = draft.taskCards[taskCardId].subTasks;\n                const subTaskIndex = subTaskIds.findIndex((id)=>id === subTaskId);\n                if (subTaskIndex > 0) {\n                    var _document_getElementById;\n                    (_document_getElementById = document.getElementById(subTaskIds[subTaskIndex - 1])) === null || _document_getElementById === void 0 ? void 0 : _document_getElementById.focus();\n                }\n                /* -------------------------------------------------------- */ delete draft.subTasks[subTaskId];\n                draft.taskCards[taskCardId].subTasks = draft.taskCards[taskCardId].subTasks.filter((id)=>id !== subTaskId);\n                break;\n            }\n        case \"taskCategoryChanged\":\n            {\n                const { taskCardId, chosenCategory } = action.payload;\n                draft.taskCards[taskCardId].category = chosenCategory;\n                break;\n            }\n    }\n});\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./hooks/Planner/plannerReducer.tsx\n"));

/***/ })

});